name: 🚀 自动化部署

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  # 代码质量检查
  quality-check:
    name: 🔍 代码质量检查
    runs-on: ubuntu-latest
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 🟢 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 安装依赖
        run: npm ci

      - name: 🔍 HTML 验证
        run: |
          echo "检查HTML语法..."
          npx html-validate index.html || true

      - name: 🎨 CSS 检查
        run: |
          echo "检查CSS语法..."
          npx stylelint "**/*.css" || true

      - name: 📝 JavaScript 检查
        run: |
          echo "检查JavaScript语法..."
          npx eslint script.js || true

  # 构建和测试
  build-test:
    name: 🏗️ 构建和测试
    runs-on: ubuntu-latest
    needs: quality-check
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 🟢 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 安装依赖
        run: npm ci

      - name: 🏗️ 构建项目
        run: |
          echo "构建项目..."
          mkdir -p dist
          cp -r *.html *.css *.js *.md dist/
          cp -r static dist/ 2>/dev/null || true

      - name: 📊 生成构建报告
        run: |
          echo "生成构建报告..."
          echo "## 📊 构建报告" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ HTML文件: $(find dist -name '*.html' | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ CSS文件: $(find dist -name '*.css' | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ JS文件: $(find dist -name '*.js' | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 构建大小: $(du -sh dist | cut -f1)" >> $GITHUB_STEP_SUMMARY

      - name: 📤 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  # 部署到 GitHub Pages
  deploy-github-pages:
    name: 🌐 部署到 GitHub Pages
    runs-on: ubuntu-latest
    needs: build-test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 📥 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: 🚀 部署到 GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v3

      - name: 📊 部署状态
        run: |
          echo "## 🚀 部署完成" >> $GITHUB_STEP_SUMMARY
          echo "- 🌐 访问地址: ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- ⏰ 部署时间: $(date)" >> $GITHUB_STEP_SUMMARY

  # 部署到 Vercel
  deploy-vercel:
    name: ⚡ 部署到 Vercel
    runs-on: ubuntu-latest
    needs: build-test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 🟢 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: 📦 安装 Vercel CLI
        run: npm install -g vercel

      - name: ⚡ 部署到 Vercel
        run: vercel --prod --token ${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

  # 部署到 Netlify
  deploy-netlify:
    name: 🌟 部署到 Netlify
    runs-on: ubuntu-latest
    needs: build-test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 📥 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: 🌟 部署到 Netlify
        uses: nwtgck/actions-netlify@v3.0
        with:
          publish-dir: './dist'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "🚀 自动部署 - ${{ github.sha }}"
          enable-pull-request-comment: true
          enable-commit-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  # 通知部署结果
  notify:
    name: 📢 通知部署结果
    runs-on: ubuntu-latest
    needs: [deploy-github-pages, deploy-vercel, deploy-netlify]
    if: always()
    steps:
      - name: 📢 发送通知
        run: |
          echo "## 📢 部署通知" >> $GITHUB_STEP_SUMMARY
          echo "- 🎉 所有部署任务已完成" >> $GITHUB_STEP_SUMMARY
          echo "- 📅 时间: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- 🔗 提交: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
